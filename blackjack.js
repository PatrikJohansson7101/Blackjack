const output = document.getElementById("output-area"); //Div f√∂r att mata ut kort och samamanlagda v√§rdet p√• korten.
const winnerArea = document.getElementById("winner-area"); // Div f√∂r att mata ut PlayerWin/DealerWin/Draw
// Kopplar v√•ra knappar till HTML.
const newGame = document.getElementById("new-game-button");
const hitButton = document.getElementById("hit-button");
const stayButton = document.getElementById("stay-button");
let playerScore = 0;
let dealerScore = 0;

hideGameButtons(); // G√∂mmer hit & stay och visar "New game"

// Orginal array med kortsymboler och v√§rden p√• varje kort.
let cards = [
    //Spades
    { card: "üÇ±", value: 1 },
    { card: "üÇ¢", value: 2 },
    { card: "üÇ£", value: 3 },
    { card: "üÇ§", value: 4 },
    { card: "üÇ•", value: 5 },
    { card: "üÇ¶", value: 6 },
    { card: "üÇß", value: 7 },
    { card: "üÇ®", value: 8 },
    { card: "üÇ©", value: 9 },
    { card: "üÇ™", value: 10 },
    { card: "üÇ´", value: 10 },
    { card: "üÇ¨", value: 10 },
    { card: "üÇ≠", value: 10 },

    //Hearts
    { card: "üÇ±", value: 1 },
    { card: "üÇ≤", value: 2 },
    { card: "üÇ≥", value: 3 },
    { card: "üÇ¥", value: 4 },
    { card: "üÇµ", value: 5 },
    { card: "üÇ∂", value: 6 },
    { card: "üÇ∑", value: 7 },
    { card: "üÇ∏", value: 8 },
    { card: "üÇπ", value: 9 },
    { card: "üÇ∫", value: 10 },
    { card: "üÇª", value: 10 },
    { card: "üÇº", value: 10 },
    { card: "üÇΩ", value: 10 },

    //JOKER?? üÇøüÇøüÇøüÇøüÇøüÇø
    //Diamonds
    { card: "üÉÅ", value: 1 },
    { card: "üÉÇ", value: 2 },
    { card: "üÉÉ", value: 3 },
    { card: "üÉÑ", value: 4 },
    { card: "üÉÖ", value: 5 },
    { card: "üÉÜ", value: 6 },
    { card: "üÉá", value: 7 },
    { card: "üÉà", value: 8 },
    { card: "üÉâ", value: 9 },
    { card: "üÉä", value: 10 },
    { card: "üÉã", value: 10 },
    { card: "üÉå", value: 10 },
    { card: "üÉç", value: 10 },

    
    //CLUBS

    { card: "üÉë", value: 1 },
    { card: "üÉí", value: 2 },
    { card: "üÉì", value: 3 },
    { card: "üÉî", value: 4 },
    { card: "üÉï", value: 5 },
    { card: "üÉñ", value: 6 },
    { card: "üÉó", value: 7 },
    { card: "üÉò", value: 8 },
    { card: "üÉô", value: 9 },
    { card: "üÉö", value: 10 },
    { card: "üÉõ", value: 10 },
    { card: "üÉú", value: 10 },
    { card: "üÉù", value: 10 }
];

let deck = []; // En empty array f√∂r att lagra v√•ra shufflade kort fr√•n shuffleDeck funktionen.


function shuffleDeck() {  //En funktion f√∂r att shuffla cards. Den tar ett random kort fr√•n orginalArrayen och l√§gger i Deck.
    let tmpDeck = [...cards]; //Anv√§nder spread f√∂r att f√• ut v√§rden fr√•n arrayen ist√§llet f√∂r arrayer. "..." √§r spread.
    //S√•l√§nge tmpDeck √§r mer √§n 0 k√∂r loopen AKA blanda kortleken.
    while (tmpDeck.length > 0) {
        let result = Math.random() * tmpDeck.length; // Genererar random nummer beroende tmpDecks l√§ngd.
        let pos = Math.trunc(result); // G√∂r om v√•rat genererade nummer till heltal.

        let tempCard = tmpDeck.splice(pos, 1); //Splicar ut ett kort fr√•n tmpDeck.

        deck.push(...tempCard); //Anv√§nder spread f√∂r att l√§gga till v√§rdet i arrayen ist√§llet f√∂r arrayer.
        //Pushar in random kort til deck.
    }
}

// Drar ut 1 kort fr√•n korteleken

function drawCard() {
    return deck.shift();
}

// Show hands
let dealer = []; //H√§r ligger det 2 kort efter att funktionen √§r k√∂rd.
let player = []; //H√§r ligger det 2 kort efter att funktionen √§r k√∂rd. dealInitialCards.

const outPutArea = document.getElementById("output-area");

function showHand(playerPara, scorePara) { // Delar ut 2 kort till player och dealer. parametrarna √§r bara en placeholder f√∂r player/dealer/random array.
    if (scorePara == 0) {
        return "";
}
   

    let cards = ""; //H√§r ska vi trycka in dealer.cards och player.cards.

    playerPara.forEach(singleCard => {
        // F√∂r varje kort i player f√•r du ett singleCard, och singlecard √§r ett kort

        cards += singleCard.card; // Konkar cardsArrayen med singleCard och symbolen som √§r .card.
    });

    cards += ` ${scorePara}</br>`; //Konkar cardsArrayen med score.

    return cards; // Returnerar cards.card + card.value
}

function clearTable() {
    //Funktion som resettar bordet aka Clearing the table

    outPutArea.innerHTML = "";
}

function calculateHandValue(cards) {
    //Cards √§r i det h√§r fallet player eller dealer, med andra ord 2 kort.

    let score = 0;

    cards.forEach(singleCard => {
        // R√§knar ut v√§rdet p√• korten i cards. F√∂r varje kort, l√§gg till v√§rdet i score.
        
        score += singleCard.value;
    });
    
    let hasAce = cards.find(element => element.value === 1)!== undefined; //S√∂ker efter ett ess(1) i cards-parametern, kan vara player eller dealer. 1 eller undefined.
    if (score + 10  <= 21 && hasAce ) {
        //Dubbelkollar om score √§r mer eller lika med 21. OM DET √§r ett E
        score += 10;
    }
    return score;
}

function dealInitialCards() {
    player.push(drawCard()); //Pushar in 1 kort till playerArrayen
    player.push(drawCard()); //Pushar in 1 kort till playerArrayen
    dealer.push(drawCard()); //Pushar in 1 kort till dealarArrayen
    dealer.push(drawCard()); //Pushar in 1 kort till dealerArrayen
}



function startNewGame() {
    showGameButtons();
    winnerArea.innerHTML = "";
    hitButton.style.display = "inline-block"; //Visar hit & stay button, d√∂ljer NewgameBtn
    stayButton.style.display = "inline-block";
    newGame.style.display = "none";
    dealer = []; // Reset array
    player = []; // Reset array
    deck = []; // Reset array
    clearTable(); //Rensar bordet varje g√•ng vi startar nytt game
    shuffleDeck(); //Blandar kortleken
    dealInitialCards(); //Delar ut 2 kort till dealar och player arrayerna.
    showHands(); //Matar ut 2 kort och po√§ngen p√• bordet fr√•n player + dealer arrays. Anropar √§ven calculateHandvalue med player/dealer score.
    
}

function showNewBtn() {
    hitButton.style.display = "none";
    stayButton.style.display = "none";
    newGame.style.display = "inline-block";
}

showNewBtn();

function showHands(stayed = false) {
    playerScore = calculateHandValue(player);
    dealerScore = calculateHandValue(dealer);
    outPutArea.innerHTML = showHand(player, playerScore); // Pushar in playerArrayen till playerPara.
    outPutArea.innerHTML += showHand(dealer, dealerScore); // Pushar in dealerArrayen till playerPara.
    let winner = determineWinner(stayed) // Stayed √§r false tills vi trycker p√• Stay med showhandTrue Anrop.
    winnerArea.innerHTML = winner; // H√§r skrivs vinnaren ut.

  if (winner != "") {
    hideGameButtons();
  }
}

function addAnotherCard(hand) {
    //hand √§r player/dealer //hand ska ta emot player eller dealers 2 kort. Allts√• handen.
    hand.push(drawCard()); //drawCard √§r ett kort fr√•n shuffledDeck.
}

// ButtonCLickEvents

newGame.addEventListener(`click`, () => {
    // Klicka p√• New Game = Anropar funktionen startNewGame.
    startNewGame();
    
});

hitButton.addEventListener(`click`, () => {
    addAnotherCard(player);
    showHands();
    
});

stayButton.addEventListener(`click`, () => {
    hideGameButtons();
    //Skapa en while loop som agerar n√§r dealerSCore √§r mindre √§n playerScore OCH&& n√§r playerScore √§r mindre eller LIKA MED 21. OCH&& dealerScore mindre eller lika med 21.
    while (playerScore >= dealerScore && playerScore <= 21 && dealerScore <= 17) {
        addAnotherCard(dealer); // Ger ett kort till dealer
        showHands(true);
    }
    showHands(true);
});

function hasBlackJack(hand, score) {
    //Ska kolla om handen har 2 kort med v√§rde p√• exakt 21.
    if (score == 21 && hand.length == 2) {
        return true;
    }
    return false;
}



function isBust(score) {
    //Ska kolla om handen har 2 kort med v√§rde p√• exakt 21.
    if (score > 21) {
        return true;
    }
    return false;
}



function determineWinner(stayed) {
    // frga jonas
    console.log(stayed, playerScore, dealerScore);

    const dealerWins = "Dealer Wins"; //Tilldelar str√§ng till dealerWins
    const playerWins = "Player Wins";
    const draw = "Draw";

    if (isBust(playerScore)) {
        //L√§gger till playerScore i "isBust" funktionen.
        return dealerWins; //Om playerscore √§r mer √§n 21 return DealerWins!
    }

    if (isBust(dealerScore)) {
        //L√§gger till dealerScore i "isBust" funktionen.
        return playerWins; //om dealerScore √§r mer √§n 21 return PlayerWins
    }
    if (dealer.length == 5 && dealerScore <= 21) {
        //Kollar om dealern har 5 kort.
        return dealerWins;
    }
    if (dealerScore == playerScore && stayed)  {
        return draw;
    }
    if (playerScore > dealerScore && stayed) {
        return playerWins;
    }
    if (playerScore < dealerScore && stayed) {
        return dealerWins;
    } // Check if dealer or player has blackjack
    else {
        let dealerBJ = hasBlackJack(dealer, dealerScore);
        let playerBJ = hasBlackJack(player, playerScore);
        if (playerBJ && dealerBJ) {
            return draw;
        }
      if (playerBJ) {
        return playerWins;
      }
      if (dealerBJ) {
        return dealerWins;
      }

  }
  return "";
}



function showGameButtons() {
  hitButton.style.display = "inline-block";
  stayButton.style.display = "inline-block";
  newGame.style.display = "none";
}
function hideGameButtons() {
  hitButton.style.display = "none";
  stayButton.style.display = "none";
  newGame.style.display = "inline-block";
}

